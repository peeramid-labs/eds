{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Clones.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/Clones.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n */\nlibrary Clones {\n    /**\n     * @dev A clone instance deployment failed.\n     */\n    error ERC1167FailedCreateClone();\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create(0, 0x09, 0x37)\n        }\n        if (instance == address(0)) {\n            revert ERC1167FailedCreateClone();\n        }\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create2(0, 0x09, 0x37, salt)\n        }\n        if (instance == address(0)) {\n            revert ERC1167FailedCreateClone();\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(add(ptr, 0x38), deployer)\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\n            mstore(add(ptr, 0x14), implementation)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\n            mstore(add(ptr, 0x58), salt)\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\n            predicted := keccak256(add(ptr, 0x43), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt\n    ) internal view returns (address predicted) {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165Checker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165Checker.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Library used to query support of an interface declared via {IERC165}.\n *\n * Note that these functions return the actual result of the query: they do not\n * `revert` if an interface is not supported. It is up to the caller to decide\n * what to do in these cases.\n */\nlibrary ERC165Checker {\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\n    bytes4 private constant INTERFACE_ID_INVALID = 0xffffffff;\n\n    /**\n     * @dev Returns true if `account` supports the {IERC165} interface.\n     */\n    function supportsERC165(address account) internal view returns (bool) {\n        // Any contract that implements ERC165 must explicitly indicate support of\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\n        return\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\n            !supportsERC165InterfaceUnchecked(account, INTERFACE_ID_INVALID);\n    }\n\n    /**\n     * @dev Returns true if `account` supports the interface defined by\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\n        // query support of both ERC165 as per the spec and support of _interfaceId\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\n    }\n\n    /**\n     * @dev Returns a boolean array where each value corresponds to the\n     * interfaces passed in and whether they're supported or not. This allows\n     * you to batch check interfaces for a contract where your expectation\n     * is that some interfaces may not be supported.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function getSupportedInterfaces(\n        address account,\n        bytes4[] memory interfaceIds\n    ) internal view returns (bool[] memory) {\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\n\n        // query support of ERC165 itself\n        if (supportsERC165(account)) {\n            // query support of each interface in interfaceIds\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\n            }\n        }\n\n        return interfaceIdsSupported;\n    }\n\n    /**\n     * @dev Returns true if `account` supports all the interfaces defined in\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\n     *\n     * Batch-querying can lead to gas savings by skipping repeated checks for\n     * {IERC165} support.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\n        // query support of ERC165 itself\n        if (!supportsERC165(account)) {\n            return false;\n        }\n\n        // query support of each interface in interfaceIds\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\n                return false;\n            }\n        }\n\n        // all interfaces supported\n        return true;\n    }\n\n    /**\n     * @notice Query if a contract implements an interface, does not check ERC165 support\n     * @param account The address of the contract to query for support of an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @return true if the contract at account indicates support of the interface with\n     * identifier interfaceId, false otherwise\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\n     * the behavior of this method is undefined. This precondition can be checked\n     * with {supportsERC165}.\n     *\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\n     * should be exercised when using this function.\n     *\n     * Interface identification is specified in ERC-165.\n     */\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\n        // prepare call\n        bytes memory encodedParams = abi.encodeCall(IERC165.supportsInterface, (interfaceId));\n\n        // perform static call\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly {\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0x00)\n        }\n\n        return success && returnSize >= 0x20 && returnValue > 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position is the index of the value in the `values` array plus 1.\n        // Position 0 is used to mean a value is not in the set.\n        mapping(bytes32 value => uint256) _positions;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._positions[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We cache the value's position to prevent multiple reads from the same storage slot\n        uint256 position = set._positions[value];\n\n        if (position != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 valueIndex = position - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (valueIndex != lastIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the lastValue to the index where the value to delete is\n                set._values[valueIndex] = lastValue;\n                // Update the tracked position of the lastValue (that was just moved)\n                set._positions[lastValue] = position;\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the tracked position for the deleted slot\n            delete set._positions[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._positions[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "src/abstracts/CloneDistribution.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\nimport \"../interfaces/IDistribution.sol\";\nimport \"./CodeIndexer.sol\";\n\nabstract contract CloneDistribution is IDistribution, CodeIndexer {\n\n\n    function sources() internal view virtual returns (address[] memory, bytes32 name, uint256 version);\n\n    function instantiate(bytes memory) public virtual returns (address[] memory instances, bytes32 distributionName, uint256 distributionVersion) {\n        (address[] memory _sources,bytes32 _distributionName,uint256 _distributionVersion) = sources();\n        instances = new address[](_sources.length);\n        for (uint256 i = 0; i < _sources.length; i++) {\n            address clone = Clones.clone(_sources[i]);\n            instances[i] = clone;\n        }\n        emit Distributed(msg.sender, instances);\n        return (instances, _distributionName, _distributionVersion);\n    }\n\n    function get() public view virtual returns (address[] memory src, bytes32 name, uint256 version) {\n        return sources();\n    }\n\n    function getMetadata() public view virtual returns (string memory);\n}\n"
    },
    "src/abstracts/CloneMiddleware.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\nimport \"../interfaces/IDistribution.sol\";\nimport \"./CodeIndexer.sol\";\n\nabstract contract CloneDistribution is IDistribution, CodeIndexer {\n\n\n    function sources() internal view virtual returns (address[] memory, bytes32 name, uint256 version);\n\n    function instantiate(bytes memory) public virtual returns (address[] memory instances, bytes32 distributionName, uint256 distributionVersion) {\n        (address[] memory _sources,bytes32 _distributionName,uint256 _distributionVersion) = sources();\n        instances = new address[](_sources.length);\n        for (uint256 i = 0; i < _sources.length; i++) {\n            address clone = Clones.clone(_sources[i]);\n            instances[i] = clone;\n        }\n        emit Distributed(msg.sender, instances);\n        return (instances, _distributionName, _distributionVersion);\n    }\n\n    function get() public view virtual returns (address[] memory src, bytes32 name, uint256 version) {\n        return sources();\n    }\n\n    function getMetadata() public view virtual returns (string memory);\n}\n"
    },
    "src/abstracts/CodeIndexer.sol": {
      "content": "// SPDX-License-Identifier: CC0-1.0\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"../ICodeIndex.sol\";\n\nabstract contract CodeIndexer {\n    //Create2 contract\n    ICodeIndex constant indexContract = ICodeIndex(0xc0D31d398c5ee86C5f8a23FA253ee8a586dA03Ce);\n    constructor() {}\n\n    function getContractsIndex() internal pure returns (ICodeIndex) {\n        return indexContract;\n    }\n\n    function index(address source) internal {\n        indexContract.register(source);\n    }\n}\n"
    },
    "src/abstracts/Distributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0 <0.9.0;\nimport \"../interfaces/IDistribution.sol\";\nimport \"../interfaces/IDistributor.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"../interfaces/IInitializer.sol\";\nimport \"../abstracts/CodeIndexer.sol\";\nabstract contract Distributor is IDistributor, CodeIndexer {\n\n    struct DistributionComponent {\n        bytes32 id;\n        address initializer;\n    }\n    using EnumerableSet for EnumerableSet.Bytes32Set;\n    EnumerableSet.Bytes32Set private distirbutionsSet;\n    mapping(bytes32 => IInitializer) private initializers;\n    mapping(address => bytes32) private distributionOf;\n    mapping(bytes32 => DistributionComponent) private distributionComponents;\n\n    function getDistributions() public view returns (bytes32[] memory) {\n        return distirbutionsSet.values();\n    }\n\n    function distributionId(address instance) public view virtual returns (bytes32 instanceId)\n    {\n        return distributionOf[instance];\n    }\n\n    function getDistributionURI(bytes32 distributorsId) public view returns (string memory) {\n        DistributionComponent memory distributionComponent = distributionComponents[distributorsId];\n        ICodeIndex codeIndex = getContractsIndex();\n        return IDistribution(codeIndex.get(distributionComponent.id)).getMetadata();\n    }\n\n    function _addDistribution(bytes32 id, bytes32 initId) internal virtual {\n        ICodeIndex codeIndex = getContractsIndex();\n        address initializerAddress = codeIndex.get(initId);\n        if (codeIndex.get(id) == address(0)) revert DistributionNotFound(id);\n        if (initializerAddress == address(0) && initId != bytes32(0)) revert InitializerNotFound(initId);\n        bytes32 distributorsId = keccak256(abi.encode(id,initId));\n        if (distirbutionsSet.contains(distributorsId)) revert DistributionExists(distributorsId);\n        distirbutionsSet.add(distributorsId);\n        distributionComponents[distributorsId] = DistributionComponent(id, initializerAddress);\n        emit DistributionAdded(id, initId);\n    }\n\n    function _removeDistribution(bytes32 distributorsId) internal virtual {\n        if (!distirbutionsSet.contains(distributorsId)) revert DistributionNotFound(distributorsId);\n        distirbutionsSet.remove(distributorsId);\n        initializers[distributorsId] = IInitializer(address(0));\n        emit DistributionRemoved(distributorsId);\n    }\n\n    function _instantiate(bytes32 distributorsId, bytes memory args) internal virtual returns (address[] memory instances, bytes32 distributionName, uint256 distributionVersion) {\n        ICodeIndex codeIndex = getContractsIndex();\n        if (!distirbutionsSet.contains(distributorsId)) revert DistributionNotFound(distributorsId);\n        DistributionComponent memory distributionComponent = distributionComponents[distributorsId];\n        address initializer = address(initializers[distributionComponent.id]);\n        bytes4 selector = IInitializer.initialize.selector;\n        bytes memory instantiationArgs = initializer != address(0) ? args : bytes (\"\");\n        (instances, distributionName, distributionVersion) = IDistribution(codeIndex.get(distributionComponent.id)).instantiate(instantiationArgs);\n        if (initializer != address(0)) {\n            (bool success, bytes memory result) = address(distributionComponent.initializer).delegatecall(\n                abi.encodeWithSelector(selector, instances, args)\n            );\n            require(success, string(result));\n        }\n        for (uint256 i = 0; i < instances.length; i++) {\n            distributionOf[instances[i]] = distributorsId;\n        }\n        emit Instantiated(distributorsId, args);\n        return (instances, distributionName, distributionVersion);\n    }\n\n    function beforeCall(\n        bytes memory,\n        bytes4,\n        address instance,\n        uint256,\n        bytes memory\n    ) public view virtual returns (bytes memory) {\n        bytes32 distributorsId = distributionOf[instance];\n        // DistributionComponent memory distributionComponent = distributionComponents[distributorsId];\n        if (distributorsId != bytes32(0) && distirbutionsSet.contains(distributorsId) == true) {\n            return abi.encode(distributorsId, \"\");\n        } else {\n            revert InvalidInstance(instance);\n        }\n    }\n\n    function afterCall(\n        bytes memory layerConfig,\n        bytes4 selector,\n        address sender,\n        uint256 value,\n        bytes memory data,\n        bytes memory beforeCallResult\n    ) public virtual {}\n}\n"
    },
    "src/abstracts/VersionDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0 <0.9.0;\nimport \"../interfaces/IDistribution.sol\";\nimport \"../interfaces/IDistributor.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"../interfaces/IInitializer.sol\";\nimport \"../abstracts/CodeIndexer.sol\";\nimport \"./Distributor.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\";\nimport \"../interfaces/IVersionDistributor.sol\";\nabstract contract VersionDistributor is IVersionDistributor, CodeIndexer {\n    using LibSemver for LibSemver.Version;\n    using EnumerableSet for EnumerableSet.AddressSet;\n    EnumerableSet.AddressSet private _repositories;\n    mapping(address => IInitializer) private initializers;\n    mapping(address => address) private distributionOf;\n    mapping(address => LibSemver.Version) private versions;\n    mapping(address => LibSemver.requirements) private requirements;\n    mapping(address => LibSemver.Version) private instancesVersions;\n\n    function _addVersionedDistribution(\n        IRepository repository,\n        LibSemver.Version memory version,\n        LibSemver.requirements requirement,\n        bytes32 initializer\n    ) internal {\n        if (!ERC165Checker.supportsInterface(address(repository), type(IRepository).interfaceId)) {\n            revert InvalidRepository(repository);\n        }\n        ICodeIndex codeIndex = getContractsIndex();\n        initializers[address(repository)] = IInitializer(codeIndex.get(initializer));\n        _repositories.add(address(repository));\n        versions[address(repository)] = version;\n        requirements[address(repository)] = requirement;\n        emit VersionedDistributionAdded(repository, LibSemver.toUint256(version), requirement, initializer);\n    }\n\n    function _changeRequirement(\n        IRepository repository,\n        LibSemver.Version memory version,\n        LibSemver.requirements requirement\n    ) internal {\n        uint256 oldVersion = LibSemver.toUint256(versions[address(repository)]);\n        uint256 newVersion = LibSemver.toUint256(version);\n        LibSemver.requirements oldRequirement = requirements[address(repository)];\n        versions[address(repository)] = version;\n        requirements[address(repository)] = requirement;\n        if (oldVersion != newVersion)\n            emit VersionChanged(address(repository), oldVersion, LibSemver.toUint256(version));\n        if (oldRequirement != requirement) emit RequirementChanged(repository, oldRequirement, requirement);\n    }\n\n    function _instantiate(\n        IRepository repository,\n        bytes calldata args\n    ) internal returns (address[] memory, bytes32, uint256) {\n        if (!_repositories.contains(address(repository))) {\n            revert InvalidRepository(repository);\n        }\n        IRepository.Source memory src = repository.get(\n            versions[address(repository)],\n            requirements[address(repository)]\n        );\n\n        (address[] memory instances, bytes32 _distributionName, uint256 _distributionVersion) = IDistribution(\n            getContractsIndex().get(src.sourceId)\n        ).instantiate(\"\");\n        bytes4 selector = IInitializer.initialize.selector;\n\n        address initializer = address(initializers[address(repository)]);\n        if (initializer != address(0)) {\n            (bool success, bytes memory result) = initializer.delegatecall(\n                abi.encodeWithSelector(selector, instances, args)\n            );\n            require(success, string(result));\n        }\n\n        for (uint256 i = 0; i < instances.length; i++) {\n            distributionOf[instances[i]] = address(repository);\n            instancesVersions[instances[i]] = src.version;\n        }\n        emit Instantiated(address(repository), args);\n        return (instances, _distributionName, _distributionVersion);\n    }\n\n    function getVersionedDistributions() public view returns (address[] memory repositories) {\n        return _repositories.values();\n    }\n\n    function getVersionedDistributionURI(IRepository repository) public view returns (string memory) {\n        return\n            IDistribution(\n                getContractsIndex().get(\n                    repository.get(versions[address(repository)], requirements[address(repository)]).sourceId\n                )\n            ).getMetadata();\n    }\n\n    function _removeVersionedDistribution(IRepository repository) internal {\n        if (!_repositories.contains(address(repository))) {\n            revert InvalidRepository(repository);\n        }\n        _repositories.remove(address(repository));\n        emit VersionedDistributionRemoved(repository);\n    }\n\n    function beforeCall(\n        bytes memory,\n        bytes4,\n        address instance,\n        uint256,\n        bytes memory\n    ) public view returns (bytes memory) {\n        address repo = distributionOf[instance];\n        if (repo != address(0) && _repositories.contains(repo)) {\n            LibSemver.Version memory version = instancesVersions[instance];\n            if (!version.compare(versions[repo], requirements[repo])) {\n                revert VersionOutdated(IRepository(repo), LibSemver.toUint256(version));\n            }\n            return \"\";\n        } else {\n            revert InvalidInstance(instance);\n        }\n    }\n\n    function afterCall(\n        bytes memory layerConfig,\n        bytes4 selector,\n        address sender,\n        uint256 value,\n        bytes memory data,\n        bytes memory beforeCallResult\n    ) public {}\n}\n"
    },
    "src/CodeIndex.sol": {
      "content": "// SPDX-License-Identifier: CC0-1.0\npragma solidity 0.8.20;\nimport \"./ICodeIndex.sol\";\n\n/**\n * @title Byte Code Indexer Contract\n * @notice You can use this contract to index contracts by their bytecode.\n * @dev This allows to query contracts by their bytecode instead of addresses.\n * @author Tim Pechersky (@Peersky)\n */\ncontract CodeIndex is ICodeIndex {\n    mapping(bytes32 => address) private index;\n\n    /**\n     * @notice Registers a contract in the index by its bytecode hash\n     * @param container The contract to register\n     * @dev `msg.codeHash` will be used\n     * @dev It will revert if the contract is already indexed\n     */\n    function register(address container) external {\n        address etalon = index[container.codehash];\n        if (etalon != address(0)) {\n            revert alreadyExists(container.codehash, etalon);\n        }\n        index[container.codehash] = container;\n        emit Indexed(container, container.codehash);\n    }\n\n    /**\n     * @notice Returns the contract address by its bytecode hash\n     * @dev returns zero if the contract is not indexed\n     * @param id The bytecode hash\n     * @return The contract address\n     */\n    function get(bytes32 id) external view returns (address) {\n        return index[id];\n    }\n}"
    },
    "src/distributions/CodeHashDistribution.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"../abstracts/CloneDistribution.sol\";\n\ncontract CodeHashDistribution is CloneDistribution {\n    bytes32 immutable metadata;\n    address immutable _reference;\n    bytes32 immutable public distributionName;\n    uint256 immutable  public distributionVersion;\n\n    constructor(bytes32 codeHash, bytes32 _metadata, bytes32 name, uint256 version) {\n        distributionName = name;\n        distributionVersion = version;\n        metadata = _metadata;\n        ICodeIndex index = getContractsIndex();\n        _reference = index.get(codeHash);\n        if (_reference == address(0)) {\n            revert(\"CodeHashDistribution: CodeHash not found in index\");\n        }\n    }\n\n    function sources() internal view virtual override returns (address[] memory, bytes32 name, uint256 version) {\n        address[] memory _sources = new address[](1);\n        _sources[0] = _reference;\n        return (_sources, distributionName, distributionVersion);\n    }\n\n    function getMetadata() public view virtual override returns (string memory) {\n        return string(abi.encodePacked(metadata)); //ToDo: Add IPFS link with readme!\n    }\n}\n"
    },
    "src/distributions/LatestVersionDistribution.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"../abstracts/CloneDistribution.sol\";\nimport \"../interfaces/IRepository.sol\";\nimport \"../libraries/LibSemver.sol\";\n\ncontract LatestVersionDistribution is CloneDistribution {\n    bytes32 immutable metadata;\n    IRepository immutable repository;\n\n    constructor(IRepository _repository, bytes32 _metadata) {\n        metadata = _metadata;\n        repository = _repository;\n    }\n\n    function sources() internal view virtual override returns (address[] memory srcs, bytes32 name, uint256 version) {\n        address[] memory _sources = new address[](1);\n        IRepository.Source memory latest = repository.getLatest();\n        _sources[0] = getContractsIndex().get(latest.sourceId);\n        return (_sources, repository.repositoryName(),LibSemver.toUint256(latest.version));\n    }\n\n    function getMetadata() public view virtual override returns (string memory) {\n        return string(abi.encodePacked(metadata)); //ToDo: Add IPFS link with readme!\n    }\n}\n"
    },
    "src/distributions/SACMDistribution.SOL.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"../abstracts/CloneDistribution.sol\";\n\ncontract CodeHashDistribution is CloneDistribution {\n    bytes32 immutable metadata;\n    address immutable _reference;\n    bytes32 immutable public distributionName;\n    uint256 immutable  public distributionVersion;\n\n    constructor(bytes32 codeHash, bytes32 _metadata, bytes32 name, uint256 version) {\n        distributionName = name;\n        distributionVersion = version;\n        metadata = _metadata;\n        ICodeIndex index = getContractsIndex();\n        _reference = index.get(codeHash);\n        if (_reference == address(0)) {\n            revert(\"CodeHashDistribution: CodeHash not found in index\");\n        }\n    }\n\n    function sources() internal view virtual override returns (address[] memory, bytes32 name, uint256 version) {\n        address[] memory _sources = new address[](1);\n        _sources[0] = _reference;\n        return (_sources, distributionName, distributionVersion);\n    }\n\n    function getMetadata() public view virtual override returns (string memory) {\n        return string(abi.encodePacked(metadata)); //ToDo: Add IPFS link with readme!\n    }\n}\n"
    },
    "src/distributors/OwnableDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"../interfaces/IDistributor.sol\";\nimport \"../interfaces/IDistribution.sol\";\nimport \"../abstracts/CodeIndexer.sol\";\nimport \"../interfaces/IInitializer.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../abstracts/Distributor.sol\";\n\ncontract OwnableDistributor is Distributor, Ownable {\n    constructor(address _owner) Ownable(_owner) {}\n\n    function instantiate(bytes32 id, bytes calldata args) public returns (address[] memory, bytes32, uint256 ) {\n        return super._instantiate(id, args);\n    }\n\n    function addDistribution(bytes32 id, bytes32 initId) public onlyOwner {\n        super._addDistribution(id, initId);\n    }\n\n    function removeDistribution(bytes32 id) public onlyOwner {\n        super._removeDistribution(id);\n    }\n}\n"
    },
    "src/distributors/OwnableVersionDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"../interfaces/IDistributor.sol\";\nimport \"../interfaces/IDistribution.sol\";\nimport \"../abstracts/CodeIndexer.sol\";\nimport \"../interfaces/IInitializer.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../abstracts/VersionDistributor.sol\";\n\ncontract OwnableVersionDistributor is VersionDistributor, Ownable {\n    constructor(address _owner) Ownable(_owner) {}\n\n    function instantiate(IRepository repository, bytes calldata args) public returns (address[] memory, bytes32, uint256) {\n        return super._instantiate(repository, args);\n    }\n\n    function addVersionedDistribution(\n        IRepository repository,\n        LibSemver.Version memory version,\n        LibSemver.requirements requirement,\n        bytes32 initializer\n    ) public onlyOwner {\n        super._addVersionedDistribution(repository, version, requirement, initializer);\n    }\n\n    function removeVersionedDistribution(IRepository repository) public onlyOwner {\n        super._removeVersionedDistribution(repository);\n    }\n\n    function changeRequirement(\n        IRepository repository,\n        LibSemver.Version memory version,\n        LibSemver.requirements requirement\n    ) public onlyOwner {\n        super._changeRequirement(repository, version, requirement);\n    }\n}\n"
    },
    "src/ICodeIndex.sol": {
      "content": "// SPDX-License-Identifier: CC0-1.0\npragma solidity 0.8.20;\n\ninterface ICodeIndex {\n    event Indexed(address indexed container, bytes32 indexed codeHash);\n    error alreadyExists(bytes32 id, address source);\n\n    function register(address container) external;\n\n    function get(bytes32 id) external view returns (address);\n}"
    },
    "src/interfaces/IDistribution.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\ninterface IDistribution {\n    event Distributed(address indexed distributor, address[] instances);\n\n    function instantiate(bytes memory data) external returns (address[] memory instances, bytes32 distributionName, uint256 distributionVersion);\n\n    function get() external view returns (address[] memory sources, bytes32 distributionName, uint256 distributionVersion);\n\n    function getMetadata() external view returns (string memory);\n}\n"
    },
    "src/interfaces/IDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\nimport \"./IDistribution.sol\";\nimport {IERC7746} from \"../interfaces/IERC7746.sol\";\nimport \"../interfaces/IRepository.sol\";\nimport \"../libraries/LibSemver.sol\";\ninterface IDistributor is IERC7746 {\n    error DistributionNotFound(bytes32 id);\n    error DistributionExists(bytes32 id);\n    error InitializerNotFound(bytes32 id);\n    error InvalidInstance(address instance);\n    event Instantiated(bytes32 indexed distributionId, bytes indexed argsHash);\n    event DistributionRemoved(bytes32 indexed id);\n\n    event DistributionAdded(bytes32 indexed id, bytes32 indexed initializerId);\n\n    function getDistributions() external view returns (bytes32[] memory distributorIds);\n\n    function getDistributionURI(bytes32 distributorId) external view returns (string memory);\n\n    function instantiate(\n        bytes32 distributorId,\n        bytes calldata args\n    ) external returns (address[] memory, bytes32 distributionName, uint256 distributionVersion);\n\n    function addDistribution(bytes32 distributorId, bytes32 initializer) external;\n\n    function removeDistribution(bytes32 distributorId) external;\n}\n"
    },
    "src/interfaces/IERC7746.sol": {
      "content": "// SPDX-License-Identifier: CC0-1.0\npragma solidity >=0.8.0 <0.9.0;\n\ninterface IERC7746 {\n    /// @notice Validates a function call before execution.\n    /// @param configuration Layer-specific configuration data.\n    /// @param selector The function selector being called.\n    /// @param sender The address initiating the call.\n    /// @param value The amount of ETH sent with the call (if any).\n    /// @param data The calldata for the function call.\n    /// @return beforeCallResult Arbitrary data to be passed to `afterCallValidation`.\n    /// @dev MUST revert if validation fails.\n    function beforeCall(\n        bytes memory configuration,\n        bytes4 selector,\n        address sender,\n        uint256 value,\n        bytes memory data\n    ) external returns (bytes memory);\n\n    /// @notice Validates a function call after execution.\n    /// @param configuration Layer-specific configuration data.\n    /// @param selector The function selector being called.\n    /// @param sender The address initiating the call.\n    /// @param value The amount of ETH sent with the call (if any).\n    /// @param data The calldata for the function call.\n    /// @param beforeCallResult The data returned by `beforeCallValidation`.\n    /// @dev MUST revert if validation fails.\n    function afterCall(\n        bytes memory configuration,\n        bytes4 selector,\n        address sender,\n        uint256 value,\n        bytes memory data,\n        bytes memory beforeCallResult\n    ) external;\n}\n"
    },
    "src/interfaces/IInitializer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\ninterface IInitializer {\n    event Initialized(address indexed container, bytes32 indexed codeHash);\n    error initializationFailed(bytes32 id, string reason);\n\n    function initialize(bytes32 distributionId, address[] memory instances, bytes32 distributionName, uint256 distributionVersion, bytes calldata args) external;\n}\n"
    },
    "src/interfaces/IRepository.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity ^0.8.8;\n\nimport \"../libraries/LibSemver.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\ninterface IRepository is IERC165 {\n    struct Source {\n        LibSemver.Version version;\n        bytes32 sourceId;\n        bytes metadata;\n    }\n\n    error VersionDoesNotExist(uint256 version);\n    error ReleaseZeroNotAllowed();\n    error VersionExists(uint256 version);\n    error VersionIncrementInvalid(uint256 version);\n    error EmptyReleaseMetadata();\n    error ReleaseDoesNotExist();\n    event VersionAdded(uint256 indexed version, bytes32 indexed source, bytes buildMetadata);\n    event ReleaseMetadataUpdated(uint256 indexed version, bytes releaseMetadata);\n\n    function updateReleaseMetadata(LibSemver.Version memory version, bytes calldata releaseMetadata) external;\n    function repositoryName() external view returns (bytes32);\n    function newRelease(bytes32 sourceId, bytes memory metadata, LibSemver.Version memory version) external;\n    function getLatest() external view returns (Source memory);\n    function get(\n        LibSemver.Version calldata version,\n        LibSemver.requirements requirement\n    ) external view returns (Source memory);\n}\n"
    },
    "src/interfaces/IVersionDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\nimport \"./IDistribution.sol\";\nimport {IERC7746} from \"../interfaces/IERC7746.sol\";\nimport \"../interfaces/IRepository.sol\";\nimport \"../libraries/LibSemver.sol\";\ninterface IVersionDistributor is IERC7746 {\n    error InvalidRepository(IRepository repository);\n    error RepositoryAlreadyExists(IRepository repository);\n    error VersionOutdated(IRepository repository, uint256 version);\n    error InvalidInstance(address instance);\n    event VersionedDistributionAdded(\n        IRepository indexed repository,\n        uint256 indexed version,\n        LibSemver.requirements requirement,\n        bytes32 indexed initializerId\n    );\n    event VersionChanged(address indexed repository, uint256 indexed oldVersion, uint256 indexed newVersion);\n    event RequirementChanged(\n        IRepository indexed repository,\n        LibSemver.requirements indexed oldRequirement,\n        LibSemver.requirements indexed newRequirement\n    );\n    event VersionedDistributionRemoved(IRepository indexed repository);\n    event Instantiated(address indexed repository, bytes indexed argsHash);\n\n    function addVersionedDistribution(\n        IRepository repository,\n        LibSemver.Version memory version,\n        LibSemver.requirements requirement,\n        bytes32 initializer\n    ) external;\n\n    function changeRequirement(\n        IRepository repository,\n        LibSemver.Version memory version,\n        LibSemver.requirements requirement\n    ) external;\n\n    function getVersionedDistributions() external view returns (address[] memory repositories);\n    function getVersionedDistributionURI(IRepository repository) external view returns (string memory);\n    function instantiate(IRepository repository, bytes calldata args) external returns (address[] memory, bytes32, uint256);\n    function removeVersionedDistribution(IRepository repository) external;\n}\n"
    },
    "src/libraries/LibSemver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nlibrary LibSemver {\n    error versionMissmatch(string message);\n    struct Version {\n        uint64 major;\n        uint64 minor;\n        uint128 patch;\n    }\n\n    enum requirements {\n        ANY, // *\n        EXACT, // =\n        MAJOR, // ^\n        MAJOR_MINOR, // ~\n        GREATER_EQUAL, // >=\n        GREATER, // >\n        LESSER_EQUAL, // <=\n        LESSER // <\n    }\n\n    function toUint256(Version memory _version) internal pure returns (uint256) {\n        return (uint256(_version.major) << 192) | (uint256(_version.minor) << 128) | uint256(_version.patch);\n    }\n\n    function parse(uint256 _version) internal pure returns (Version memory) {\n        return Version(uint64(_version >> 192), uint64(_version >> 128), uint128(_version));\n    }\n\n    function toString(Version memory _version) internal pure returns (string memory) {\n        return\n            string(\n                abi.encodePacked(\n                    Strings.toString(uint256(_version.major)),\n                    \".\",\n                    Strings.toString(uint256(_version.minor)),\n                    \".\",\n                    Strings.toString(uint256(_version.patch))\n                )\n            );\n    }\n\n    function require_exact(Version memory _version1, Version memory _version2) internal pure {\n        if (toUint256(_version1) != toUint256(_version2)) revert versionMissmatch(\"Version mismatch\");\n    }\n\n    function require_major(Version memory _version1, Version memory _version2) internal pure {\n        if (_version1.major != _version2.major) revert versionMissmatch(\"Major version mismatch\");\n    }\n\n    function require_major_minor(Version memory _version1, Version memory _version2) internal pure {\n        if (_version1.major != _version2.major || _version1.minor != _version2.minor)\n            revert versionMissmatch(\"Major and minor version mismatch\");\n    }\n\n    function require_greater_equal(Version memory _version1, Version memory _version2) internal pure {\n        if (toUint256(_version1) < toUint256(_version2)) revert versionMissmatch(\"Version is not greater or equal\");\n    }\n\n    function require_greater(Version memory _version1, Version memory _version2) internal pure {\n        if (toUint256(_version1) <= toUint256(_version2)) revert versionMissmatch(\"Version is not greater\");\n    }\n\n    function require_lesser_equal(Version memory _version1, Version memory _version2) internal pure {\n        if (toUint256(_version1) > toUint256(_version2)) revert versionMissmatch(\"Version is not lesser or equal\");\n    }\n\n    function require_lesser(Version memory _version1, Version memory _version2) internal pure {\n        if (toUint256(_version1) >= toUint256(_version2)) revert versionMissmatch(\"Version is not lesser\");\n    }\n\n    function compare(Version memory _version1, Version memory _version2) internal pure returns (uint256) {\n        return toUint256(_version1) - toUint256(_version2);\n    }\n\n    function compare(\n        Version memory _version1,\n        Version memory _version2,\n        requirements _requirement\n    ) internal pure returns (bool) {\n        if (_requirement == requirements.ANY) return true;\n        if (_requirement == requirements.EXACT) return toUint256(_version1) == toUint256(_version2);\n        if (_requirement == requirements.MAJOR) return _version1.major == _version2.major;\n        if (_requirement == requirements.MAJOR_MINOR)\n            return _version1.major == _version2.major && _version1.minor == _version2.minor;\n        if (_requirement == requirements.GREATER_EQUAL) return toUint256(_version1) >= toUint256(_version2);\n        if (_requirement == requirements.GREATER) return toUint256(_version1) > toUint256(_version2);\n        if (_requirement == requirements.LESSER_EQUAL) return toUint256(_version1) <= toUint256(_version2);\n        if (_requirement == requirements.LESSER) return toUint256(_version1) < toUint256(_version2);\n        return false;\n    }\n\n    function getNextMajor(Version memory _version) internal pure returns (Version memory) {\n        return Version(_version.major + 1, 0, 0);\n    }\n\n    function getNextMinor(Version memory _version) internal pure returns (Version memory) {\n        return Version(_version.major, _version.minor + 1, 0);\n    }\n\n    function getNextPatch(Version memory _version) internal pure returns (Version memory) {\n        return Version(_version.major, _version.minor, _version.patch + 1);\n    }\n}\n"
    },
    "src/mocks/MockCloneDistribution.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"../abstracts/CloneDistribution.sol\";\n\ncontract MockCloneDistribution is CloneDistribution {\n    function getMetadata() public pure override returns (string memory) {\n        return \"MockCloneDistribution\";\n    }\n\n    function sources() internal view override returns (address[] memory, bytes32, uint256) {\n        address[] memory source = new address[](1);\n        source[0] = address(this);\n        return (source, bytes32(abi.encodePacked(\"MockCloneDistribution\")), 1);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200000
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}